getwd()
install.packages("swirl")
library(swirl)
install_from_swirl("R_Programming")
install_from_swirl("R Programming")
swirl()
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1,1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
install_from_swirl("Statistical Inference")
swirl()
(5+6)/36
1-((2+1)/36)
deck
52
4/52
0
(3*4)/52
2/51
swirl()
swirl()
dice_sqr
swirl()
(1.6 X .8)/2
(1.6 * .8)/2
.64/2
(.64*2)/2
BP = 70
avg = 80
sdev = 10
prob = round(pnorm(BP, mean = avg, sd = sdev) * 100)
prob
q = 0.95
avg = 1100
sdev = 75
vol = round(qnorm(q,mean=avg,sd=sdev))
vol
n  = 100
SE = sdev/sqrt(n)
round(qnorm(q,mean=avg,sd=SE))
p = 0.5
n = 5
q = 3
prob = round(pbinom(q,size=n,prob = p, lower.tail = FALSE)*100)
prob
avg = 15
sdev = 10
n == 100
n = 100
SE = sdev/sqrt(n)
left = 14
right = 15
pleft = pnorm(left,mean=avg,sd=SE)*100
pright = pnorm(right,mean=avg,sd=SE)*100
prob = round(pright - pleft)
prob
right = 16
pleft = pnorm(left,mean=avg,sd=SE)*100
pright = pnorm(right,mean=avg,sd=SE)*100
pleft = pnorm(left,mean=avg,sd=SE)*100
pright = pnorm(right,mean=avg,sd=SE)*100
prob = round(pright - pleft)
prob
t = 3
lam = 5
q = 10
prob = round(ppois(q,lambda = t*lam),digits = 2)
prob
xbar = 1100
s=30
n=9
alpha=0.05
ts=at(1-alpha/2,n-1)
ts=qt(1-alpha/2,n-1)
ts
round(xbar+c(-1,1)*ts*s/sqrt(n))
rm
rm(list=ls())
xbar= -2
n=9
alpha=0.05
ts=qt1-alpha/2,n-1
ts=qt(1-alpha/2,n-1)
ts
s = -xbar * sqrt(n) / ts
s
rm(list=ls())
nx = 10
ny = 10
xbar = 5
ybar = 3
varx = 0.6
vary = 0.68
alpha = 0.05
sp2 = ((nx - 1) * varx + (ny - 1) * vary) / (nx + ny - 2)
sp = sqrt(sp2)
ts = qt(1 - (alpha / 2), nx + ny -2)
round((ybar - xbar) + c(-1,1) * ts * sp * (sqrt(1 / nx + 1 / ny)), 2)
rm(list=ls())
nx = 100
ny = 100
xbar = 6
ybar = 4
sx = 2
sy = 0.5
alpha = 0.05
sp2 = ((nx - 1) * sx^2 + (ny -1) * sy^2) / (nx + ny -2)
sp = sqrt(sp2)
ts = qt(1 - (alpha / 2), nx + ny -2)
round(xbar - ybar) + c(-1,1) * ts * sp * (sqrt(1 / nx + 1 / ny)), 2)
round((xbar - ybar) + c(-1,1) * ts * sp * (sqrt(1 / nx + 1 / ny)), 2)
rm(list=ls())
nx = 9
ny = 9
xbar = -3
ybar = 1
sx = 1.5
sy = 1.8
alpha = 0.1
sp2 = ((nx -1) * sx^2 + (ny - 1) * sy^2) / (nx + ny - 2)
sp = sqrt(sp2)
ts = qt( 1 - (alpha / 2), nx + ny -2)
round((xbar - ybar) + c(-1, 1) * ts * sp * (sqrt(1 / nx + 1 / ny)), 3)
rm(list=ls())
sub = c(1,2,3,4,5)
baseline = c(140,138,150,148,135)
wk2 = c(132,135,151,146,130)
exam = data.frame(sub, baseline, wk2)
exam
test = t.test(x=exam$baseline,y=exam$wk2,alt="two.sided",paired = TRUE)
pval = test$p.value
round(pval,3)
rm.list(ls())
rm(list=ls())
n = 9
mu = 1100
sigma = 30
quantile=0.975
conifInt = mu + c(-1,1) * qt(quantile,df=n-1)*sigma/sqrt(n)
conifInt
rm(list=ls())
n = 4
x = 3
test = binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rm(list=ls())
rate = 1/100
errors = 10
days = 1787
test = poisson.test(errors,T=days,r=rate,alt="less")
round(test$p.value,2)
rm(list=ls())
ny = 9
nx = 9
sigy = 1.5
sigx = 1.8
muy = -3
mux = 1
sigp = (((nx - 1)*sigx^2 + (ny -1)*sigy^2)/(nx + ny -2))
pval = pt((muy-mux)/(sigp*(1/nx+1/ny)^.5),df=ny+nx-2)
pval
rm(list=ls())
n = 100
mu = .01
sig = .04
p = .05
pwr = power.t.test(n=n,delta=mu,sd=sig,sig.level = p,type="one.sample",alt="one.sided")$power
round(pwr,2)
rm(list=ls())
mu = .01
sig = .04
p = .05
pwr = .9
n = power.t.test(power=pwr,delta=mu,sd=sig,sig.level = p,type = "one.sample",alt="one.sided")$n
n
ls
list.files
list.files()
setwd("Reproducible_Research_Porject-1")
setwd(Reproducible_Research_Porject-1)
setwd("/Users/jmkir/documents/R/Reproducible_Research_Porject-1")
setwd("Users\jmkir\Documents\R\Reproducible_Research_Project-1")
setwd("\Users\jmkir\Documents\R\Reproducible_Research_Project-1")
setwd("/Users/jmkir/Documents/R/Reproducible_Research_Project-1")
install.packages("dplyr")
